from aiogram import Bot, Dispatcher, F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = "7743229312:AAGJpIz6j8YP3n5Rd9x7OkD-Iz9BPZyj6zI"
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = sqlite3.connect("reminders.db", check_same_thread=False)
cursor = db.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    title TEXT,
    description TEXT,
    date TEXT
)
""")
db.commit()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ReminderStates(StatesGroup):
    choosing_category = State()
    adding_title = State()
    adding_description = State()
    adding_date = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardBuilder()
main_menu.button(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
main_menu.button(text="–ü–ª–∞–Ω—ã")
main_menu.button(text="–í—Å—Ç—Ä–µ—á–∏")
main_menu = main_menu.as_markup(resize_keyboard=True)

add_delete_menu = InlineKeyboardBuilder()
add_delete_menu.button(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="add")
add_delete_menu.button(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delete_all")
add_delete_menu = add_delete_menu.as_markup()


# –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)


@dp.message(F.text.in_({"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–ü–ª–∞–Ω—ã", "–í—Å—Ç—Ä–µ—á–∏"}))
async def choose_category(message: types.Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)
    await message.answer(f"–†–∞–∑–¥–µ–ª {category}. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=add_delete_menu)
    await state.set_state(ReminderStates.choosing_category)


@dp.callback_query(F.data == "add")
async def add_reminder(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(ReminderStates.adding_title)


@dp.message(ReminderStates.adding_title)
async def set_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(ReminderStates.adding_description)


@dp.message(ReminderStates.adding_description)
async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:")
    await state.set_state(ReminderStates.adding_date)


@dp.message(ReminderStates.adding_date)
async def set_date(message: types.Message, state: FSMContext):
    try:
        reminder_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        if reminder_date <= datetime.now():
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        data = await state.get_data()
        cursor.execute("""
        INSERT INTO reminders (user_id, category, title, description, date) 
        VALUES (?, ?, ?, ?, ?)
        """, (message.from_user.id, data["category"], data["title"], data["description"], reminder_date))
        db.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —à–µ–¥—É–ª–µ—Ä
        scheduler.add_job(
            send_reminder,
            trigger="date",
            run_date=reminder_date,
            args=[message.from_user.id, data["title"], data["description"], cursor.lastrowid]
        )

        await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")


async def send_reminder(user_id: int, title: str, description: str, reminder_id: int):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n*{title}*\n{description}", parse_mode="Markdown")
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
        db.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


@dp.callback_query(F.data == "delete_all")
async def delete_all_reminders(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    cursor.execute("DELETE FROM reminders WHERE user_id = ? AND category = ?", (callback.from_user.id, category))
    db.commit()
    scheduler.remove_all_jobs()
    await load_reminders()
    await callback.message.answer(f"–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ {category} —É–¥–∞–ª–µ–Ω—ã!", reply_markup=main_menu)
    await state.clear()


# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —à–µ–¥—É–ª–µ—Ä –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def load_reminders():
    cursor.execute("SELECT id, user_id, title, description, date FROM reminders")
    rows = cursor.fetchall()
    for row in rows:
        reminder_id, user_id, title, description, date_str = row
        reminder_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        if reminder_date > datetime.now():
            scheduler.add_job(
                send_reminder,
                trigger="date",
                run_date=reminder_date,
                args=[user_id, title, description, reminder_id]
            )
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
            cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
            db.commit()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await load_reminders()
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
